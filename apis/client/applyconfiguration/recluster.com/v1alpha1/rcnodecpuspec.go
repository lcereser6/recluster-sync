/*
Copyright 2025 LC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	reclustercomv1alpha1 "github.com/lcereser6/recluster-sync/apis/recluster.com/v1alpha1"
)

// RcNodeCPUSpecApplyConfiguration represents a declarative configuration of the RcNodeCPUSpec type for use
// with apply.
type RcNodeCPUSpecApplyConfiguration struct {
	Architecture         *reclustercomv1alpha1.CpuArchitecture `json:"architecture,omitempty"`
	Vendor               *reclustercomv1alpha1.CpuVendor       `json:"vendor,omitempty"`
	Family               *int                                  `json:"family,omitempty"`
	Model                *int                                  `json:"model,omitempty"`
	Name                 *string                               `json:"name,omitempty"`
	Cores                *int                                  `json:"cores,omitempty"`
	Flags                []string                              `json:"flags,omitempty"`
	CacheL1d             *int                                  `json:"cacheL1d,omitempty"`
	CacheL1i             *int                                  `json:"cacheL1i,omitempty"`
	CacheL2              *int                                  `json:"cacheL2,omitempty"`
	CacheL3              *int                                  `json:"cacheL3,omitempty"`
	Vulnerabilities      []string                              `json:"vulnerabilities,omitempty"`
	SingleThreadScore    *int                                  `json:"singleThreadScore,omitempty"`
	MultiThreadScore     *int                                  `json:"multiThreadScore,omitempty"`
	EfficiencyThreshold  *int                                  `json:"efficiencyThreshold,omitempty"`
	PerformanceThreshold *int                                  `json:"performanceThreshold,omitempty"`
}

// RcNodeCPUSpecApplyConfiguration constructs a declarative configuration of the RcNodeCPUSpec type for use with
// apply.
func RcNodeCPUSpec() *RcNodeCPUSpecApplyConfiguration {
	return &RcNodeCPUSpecApplyConfiguration{}
}

// WithArchitecture sets the Architecture field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Architecture field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithArchitecture(value reclustercomv1alpha1.CpuArchitecture) *RcNodeCPUSpecApplyConfiguration {
	b.Architecture = &value
	return b
}

// WithVendor sets the Vendor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vendor field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithVendor(value reclustercomv1alpha1.CpuVendor) *RcNodeCPUSpecApplyConfiguration {
	b.Vendor = &value
	return b
}

// WithFamily sets the Family field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Family field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithFamily(value int) *RcNodeCPUSpecApplyConfiguration {
	b.Family = &value
	return b
}

// WithModel sets the Model field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Model field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithModel(value int) *RcNodeCPUSpecApplyConfiguration {
	b.Model = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithName(value string) *RcNodeCPUSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithCores sets the Cores field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cores field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithCores(value int) *RcNodeCPUSpecApplyConfiguration {
	b.Cores = &value
	return b
}

// WithFlags adds the given value to the Flags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Flags field.
func (b *RcNodeCPUSpecApplyConfiguration) WithFlags(values ...string) *RcNodeCPUSpecApplyConfiguration {
	for i := range values {
		b.Flags = append(b.Flags, values[i])
	}
	return b
}

// WithCacheL1d sets the CacheL1d field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheL1d field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithCacheL1d(value int) *RcNodeCPUSpecApplyConfiguration {
	b.CacheL1d = &value
	return b
}

// WithCacheL1i sets the CacheL1i field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheL1i field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithCacheL1i(value int) *RcNodeCPUSpecApplyConfiguration {
	b.CacheL1i = &value
	return b
}

// WithCacheL2 sets the CacheL2 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheL2 field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithCacheL2(value int) *RcNodeCPUSpecApplyConfiguration {
	b.CacheL2 = &value
	return b
}

// WithCacheL3 sets the CacheL3 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheL3 field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithCacheL3(value int) *RcNodeCPUSpecApplyConfiguration {
	b.CacheL3 = &value
	return b
}

// WithVulnerabilities adds the given value to the Vulnerabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Vulnerabilities field.
func (b *RcNodeCPUSpecApplyConfiguration) WithVulnerabilities(values ...string) *RcNodeCPUSpecApplyConfiguration {
	for i := range values {
		b.Vulnerabilities = append(b.Vulnerabilities, values[i])
	}
	return b
}

// WithSingleThreadScore sets the SingleThreadScore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SingleThreadScore field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithSingleThreadScore(value int) *RcNodeCPUSpecApplyConfiguration {
	b.SingleThreadScore = &value
	return b
}

// WithMultiThreadScore sets the MultiThreadScore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MultiThreadScore field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithMultiThreadScore(value int) *RcNodeCPUSpecApplyConfiguration {
	b.MultiThreadScore = &value
	return b
}

// WithEfficiencyThreshold sets the EfficiencyThreshold field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EfficiencyThreshold field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithEfficiencyThreshold(value int) *RcNodeCPUSpecApplyConfiguration {
	b.EfficiencyThreshold = &value
	return b
}

// WithPerformanceThreshold sets the PerformanceThreshold field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PerformanceThreshold field is set to the value of the last call.
func (b *RcNodeCPUSpecApplyConfiguration) WithPerformanceThreshold(value int) *RcNodeCPUSpecApplyConfiguration {
	b.PerformanceThreshold = &value
	return b
}
