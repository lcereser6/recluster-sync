/*
Copyright 2025 LC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RcPolicySpecApplyConfiguration represents a declarative configuration of the RcPolicySpec type for use
// with apply.
type RcPolicySpecApplyConfiguration struct {
	Selector        *v1.LabelSelectorApplyConfiguration     `json:"selector,omitempty"`
	Metrics         []PolicyMetricApplyConfiguration        `json:"metrics,omitempty"`
	HardConstraints []PolicyConstraintApplyConfiguration    `json:"hardConstraints,omitempty"`
	Schedule        []PolicyScheduleEntryApplyConfiguration `json:"schedule,omitempty"`
	ExternalFeeds   []ExternalFeedRefApplyConfiguration     `json:"externalFeeds,omitempty"`
}

// RcPolicySpecApplyConfiguration constructs a declarative configuration of the RcPolicySpec type for use with
// apply.
func RcPolicySpec() *RcPolicySpecApplyConfiguration {
	return &RcPolicySpecApplyConfiguration{}
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *RcPolicySpecApplyConfiguration) WithSelector(value *v1.LabelSelectorApplyConfiguration) *RcPolicySpecApplyConfiguration {
	b.Selector = value
	return b
}

// WithMetrics adds the given value to the Metrics field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Metrics field.
func (b *RcPolicySpecApplyConfiguration) WithMetrics(values ...*PolicyMetricApplyConfiguration) *RcPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMetrics")
		}
		b.Metrics = append(b.Metrics, *values[i])
	}
	return b
}

// WithHardConstraints adds the given value to the HardConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the HardConstraints field.
func (b *RcPolicySpecApplyConfiguration) WithHardConstraints(values ...*PolicyConstraintApplyConfiguration) *RcPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithHardConstraints")
		}
		b.HardConstraints = append(b.HardConstraints, *values[i])
	}
	return b
}

// WithSchedule adds the given value to the Schedule field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Schedule field.
func (b *RcPolicySpecApplyConfiguration) WithSchedule(values ...*PolicyScheduleEntryApplyConfiguration) *RcPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSchedule")
		}
		b.Schedule = append(b.Schedule, *values[i])
	}
	return b
}

// WithExternalFeeds adds the given value to the ExternalFeeds field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExternalFeeds field.
func (b *RcPolicySpecApplyConfiguration) WithExternalFeeds(values ...*ExternalFeedRefApplyConfiguration) *RcPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithExternalFeeds")
		}
		b.ExternalFeeds = append(b.ExternalFeeds, *values[i])
	}
	return b
}
