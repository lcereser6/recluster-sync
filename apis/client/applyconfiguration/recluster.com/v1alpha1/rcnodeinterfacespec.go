/*
Copyright 2025 LC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	reclustercomv1alpha1 "github.com/lcereser6/recluster-sync/apis/recluster.com/v1alpha1"
)

// RcNodeInterfaceSpecApplyConfiguration represents a declarative configuration of the RcNodeInterfaceSpec type for use
// with apply.
type RcNodeInterfaceSpecApplyConfiguration struct {
	Name    *string                        `json:"name,omitempty"`
	Address *string                        `json:"address,omitempty"`
	Speed   *int64                         `json:"speed,omitempty"`
	WoL     []reclustercomv1alpha1.WoLFlag `json:"wol,omitempty"`
}

// RcNodeInterfaceSpecApplyConfiguration constructs a declarative configuration of the RcNodeInterfaceSpec type for use with
// apply.
func RcNodeInterfaceSpec() *RcNodeInterfaceSpecApplyConfiguration {
	return &RcNodeInterfaceSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RcNodeInterfaceSpecApplyConfiguration) WithName(value string) *RcNodeInterfaceSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *RcNodeInterfaceSpecApplyConfiguration) WithAddress(value string) *RcNodeInterfaceSpecApplyConfiguration {
	b.Address = &value
	return b
}

// WithSpeed sets the Speed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Speed field is set to the value of the last call.
func (b *RcNodeInterfaceSpecApplyConfiguration) WithSpeed(value int64) *RcNodeInterfaceSpecApplyConfiguration {
	b.Speed = &value
	return b
}

// WithWoL adds the given value to the WoL field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WoL field.
func (b *RcNodeInterfaceSpecApplyConfiguration) WithWoL(values ...reclustercomv1alpha1.WoLFlag) *RcNodeInterfaceSpecApplyConfiguration {
	for i := range values {
		b.WoL = append(b.WoL, values[i])
	}
	return b
}
