/*
Copyright 2025 LC.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RcnodeSpecApplyConfiguration represents a declarative configuration of the RcnodeSpec type for use
// with apply.
type RcnodeSpecApplyConfiguration struct {
	CPUCores     *int    `json:"cpuCores,omitempty"`
	MemoryGiB    *int    `json:"memoryGiB,omitempty"`
	BootSeconds  *int    `json:"bootSeconds,omitempty"`
	DesiredState *string `json:"desiredState,omitempty"`
	Foo          *string `json:"foo,omitempty"`
}

// RcnodeSpecApplyConfiguration constructs a declarative configuration of the RcnodeSpec type for use with
// apply.
func RcnodeSpec() *RcnodeSpecApplyConfiguration {
	return &RcnodeSpecApplyConfiguration{}
}

// WithCPUCores sets the CPUCores field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPUCores field is set to the value of the last call.
func (b *RcnodeSpecApplyConfiguration) WithCPUCores(value int) *RcnodeSpecApplyConfiguration {
	b.CPUCores = &value
	return b
}

// WithMemoryGiB sets the MemoryGiB field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MemoryGiB field is set to the value of the last call.
func (b *RcnodeSpecApplyConfiguration) WithMemoryGiB(value int) *RcnodeSpecApplyConfiguration {
	b.MemoryGiB = &value
	return b
}

// WithBootSeconds sets the BootSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BootSeconds field is set to the value of the last call.
func (b *RcnodeSpecApplyConfiguration) WithBootSeconds(value int) *RcnodeSpecApplyConfiguration {
	b.BootSeconds = &value
	return b
}

// WithDesiredState sets the DesiredState field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DesiredState field is set to the value of the last call.
func (b *RcnodeSpecApplyConfiguration) WithDesiredState(value string) *RcnodeSpecApplyConfiguration {
	b.DesiredState = &value
	return b
}

// WithFoo sets the Foo field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Foo field is set to the value of the last call.
func (b *RcnodeSpecApplyConfiguration) WithFoo(value string) *RcnodeSpecApplyConfiguration {
	b.Foo = &value
	return b
}
